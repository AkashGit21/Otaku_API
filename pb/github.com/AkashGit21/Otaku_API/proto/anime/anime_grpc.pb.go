// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package animepb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnimeServiceClient is the client API for AnimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimeServiceClient interface {
	// RPC for fetching the list of Animes
	ListAnimes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListAnimesResponse, error)
}

type animeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeServiceClient(cc grpc.ClientConnInterface) AnimeServiceClient {
	return &animeServiceClient{cc}
}

func (c *animeServiceClient) ListAnimes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListAnimesResponse, error) {
	out := new(ListAnimesResponse)
	err := c.cc.Invoke(ctx, "/otaku.anime.AnimeService/ListAnimes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimeServiceServer is the server API for AnimeService service.
// All implementations must embed UnimplementedAnimeServiceServer
// for forward compatibility
type AnimeServiceServer interface {
	// RPC for fetching the list of Animes
	ListAnimes(context.Context, *empty.Empty) (*ListAnimesResponse, error)
	mustEmbedUnimplementedAnimeServiceServer()
}

// UnimplementedAnimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnimeServiceServer struct {
}

func (UnimplementedAnimeServiceServer) ListAnimes(context.Context, *empty.Empty) (*ListAnimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnimes not implemented")
}
func (UnimplementedAnimeServiceServer) mustEmbedUnimplementedAnimeServiceServer() {}

// UnsafeAnimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeServiceServer will
// result in compilation errors.
type UnsafeAnimeServiceServer interface {
	mustEmbedUnimplementedAnimeServiceServer()
}

func RegisterAnimeServiceServer(s grpc.ServiceRegistrar, srv AnimeServiceServer) {
	s.RegisterService(&AnimeService_ServiceDesc, srv)
}

func _AnimeService_ListAnimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).ListAnimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otaku.anime.AnimeService/ListAnimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).ListAnimes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AnimeService_ServiceDesc is the grpc.ServiceDesc for AnimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "otaku.anime.AnimeService",
	HandlerType: (*AnimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAnimes",
			Handler:    _AnimeService_ListAnimes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anime.proto",
}
