// Code generated by sqlc. DO NOT EDIT.
// source: anime.sql

package db

import (
	"context"

	animepb "github.com/AkashGit21/Otaku_API/pb/github.com/AkashGit21/Otaku_API/proto/anime"
	"github.com/lib/pq"
)

const createAnime = `-- name: CreateAnime :one
INSERT INTO animes (
  name, 
  description,
  num_of_episodes, 
  "cast",
  status, 
  genre
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, status, num_of_episodes, "cast", genre, created_at
`

func (q *Queries) CreateAnime(ctx context.Context, arg *animepb.Anime) (*animepb.Anime, error) {
	row := q.db.QueryRowContext(ctx, createAnime,
		arg.Name,
		arg.Description,
		arg.NumOfEpisodes,
		pq.Array(arg.Cast),
		arg.Status,
		pq.Array(arg.Genre),
	)
	var i animepb.Anime
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.NumOfEpisodes,
		pq.Array(&i.Cast),
		pq.Array(&i.Genre),
		&i.CreatedAt,
	)
	return &i, err
}

const deleteAnime = `-- name: DeleteAnime :exec
DELETE FROM animes
WHERE id = $1
`

func (q *Queries) DeleteAnime(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAnime, id)
	return err
}

const getAnime = `-- name: GetAnime :one
SELECT id, name, description, status, num_of_episodes, "cast", genre, created_at FROM animes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnime(ctx context.Context, id int64) (*animepb.Anime, error) {
	row := q.db.QueryRowContext(ctx, getAnime, id)
	var i animepb.Anime
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.NumOfEpisodes,
		pq.Array(&i.Cast),
		pq.Array(&i.Genre),
		&i.CreatedAt,
	)
	return &i, err
}

const listAnimes = `-- name: ListAnimes :many
SELECT id, name, description, status, num_of_episodes, "cast", genre, created_at FROM animes 
ORDER BY NAME 
LIMIT 10 OFFSET ($1-1)*10
`

func (q *Queries) ListAnimes(ctx context.Context, dollar_1 interface{}) ([]*animepb.Anime, error) {
	rows, err := q.db.QueryContext(ctx, listAnimes, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*animepb.Anime
	for rows.Next() {
		var i animepb.Anime
		if err := rows.Scan(
			&i.Id,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.NumOfEpisodes,
			pq.Array(&i.Cast),
			pq.Array(&i.Genre),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnime = `-- name: UpdateAnime :exec
UPDATE animes SET 
  name = $2,
  description = $3,
  num_of_episodes = $4,
  "cast" = $5,
  status = $6,
  genre = $7
WHERE id = $1
`

func (q *Queries) UpdateAnime(ctx context.Context, arg *animepb.Anime) error {
	_, err := q.db.ExecContext(ctx, updateAnime,
		arg.Name,
		arg.Description,
		arg.NumOfEpisodes,
		pq.Array(arg.Cast),
		arg.Status,
		pq.Array(arg.Genre),
	)
	return err
}
