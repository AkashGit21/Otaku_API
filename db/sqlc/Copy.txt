// Code generated by sqlc. DO NOT EDIT.
// source: anime.sql

package db

import (
	"context"

	animepb "github.com/AkashGit21/Otaku_API/pb/github.com/AkashGit21/Otaku_API/proto/anime"
	"github.com/lib/pq"
)

const createAnime = `-- name: CreateAnime :one
INSERT INTO animes (
  name, 
  description,
  status, 
  num_of_episodes, 
  "cast",
  genre
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING name, description, status, num_of_episodes, "cast", genre, created_at
`

func (q *Queries) CreateAnime(ctx context.Context, arg *animepb.Anime) (*animepb.Anime, error) {
	row := q.db.QueryRowContext(ctx, createAnime,
		arg.Id,
		arg.Name,
		arg.Description,
		arg.Status,
		arg.NumOfEpisodes,
		pq.Array(arg.Cast),
		pq.Array(arg.Genre),
	)
	var i animepb.Anime
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.NumOfEpisodes,
		pq.Array(&i.Cast),
		pq.Array(&i.Genre),
		&i.CreatedAt,
	)
	return &i, err
}

const listAnimes = `-- name: ListAnimes :many
SELECT name, description, status, num_of_episodes, "cast", genre, created_at FROM animes 
ORDER BY NAME 
LIMIT 10 OFFSET ($1-1)*10
`

func (q *Queries) ListAnimes(ctx context.Context, dollar_1 interface{}) ([]*animepb.Anime, error) {
	rows, err := q.db.QueryContext(ctx, listAnimes, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*animepb.Anime
	for rows.Next() {
		var i animepb.Anime
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.Status,
			&i.NumOfEpisodes,
			pq.Array(&i.Cast),
			pq.Array(&i.Genre),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
